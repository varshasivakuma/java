class ArmstrongThread extends Thread {
    private final int start;
    private final int end;

    public ArmstrongThread(int start, int end) {
        this.start = start;
        this.end = end;
    }

    private boolean isArmstrong(int number) {
        int originalNumber, remainder, result = 0;
        originalNumber = number;

        while (originalNumber != 0) {
            remainder = originalNumber % 10;
            result += Math.pow(remainder, 3);
            originalNumber /= 10;
        }

        return result == number;
    }

    @Override
    public void run() {
        System.out.println("Armstrong numbers between " + start + " and " + end + ":");
        for (int i = start; i <= end; i++) {
            if (isArmstrong(i)) {
                System.out.println(i);
            }
        }
    }
}

class FibonacciThread extends Thread {
    private final int count;

    public FibonacciThread(int count) {
        this.count = count;
    }

    @Override
    public void run() {
        System.out.println("Fibonacci series of " + count + " numbers:");
        int num1 = 0, num2 = 1;
        for (int i = 0; i < count; i++) {
            System.out.println(num1);
            int sum = num1 + num2;
            num1 = num2;
            num2 = sum;
            try {
                Thread.sleep(500); // Sleep for 500 milliseconds
            } catch (InterruptedException e) {
                System.out.println("Fibonacci thread interrupted.");
                return;
            }
        }
    }
}

public class ThreadDemo {
    public static void main(String[] args) {
        ArmstrongThread armstrongThread = new ArmstrongThread(100, 999);
        FibonacciThread fibonacciThread = new FibonacciThread(10);

        // Starting both threads
        armstrongThread.start();
        fibonacciThread.start();

        // Joining both threads to ensure they complete before the main thread ends
        try {
            armstrongThread.join();
            fibonacciThread.join();
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted.");
        }

        System.out.println("Main thread exiting.");
    }
}
